using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Drawing.Imaging;

namespace CommonUtil.Helper.BallotAiying2
{
    public class ImageHelper
    {
        public int[,,] GetRGBData(Bitmap bitImg)
        {
            Bitmap bimage = new Bitmap(bitImg);    //转换为Format32bppRgb

            BitmapData bmData = bimage.LockBits(
                new Rectangle(0, 0, bimage.Width, bimage.Height),
                    ImageLockMode.ReadOnly,
                    PixelFormat.Format24bppRgb
                );

            int stride = bmData.Stride;
            System.IntPtr Scan0 = bmData.Scan0;//取得像點資料的起始位址 
            int ByteNumber_Width = bimage.Width * 3;// 計算每行的像點所佔據的byte 總數 
            int ByteOfSkip = stride - ByteNumber_Width;// 計算每一行後面幾個 Padding bytes 
            int Height = bimage.Height;
            int Width = bimage.Width;
            int[, ,] rgbData = new int[Width, Height, 3];
            
            // Step 3: 直接利用指標, 把影像資料取出來 
            // 請注意先取 B 然後是 G, 最後才是 R 
            unsafe
            {
                byte* p = (byte*)(void*)Scan0;
                for (int y = 0; y < Height; y++)
                {
                    for (int x = 0; x < Width; x++)
                    {
                        rgbData[x, y, 2] = p[0]; // B 
                        ++p;
                        rgbData[x, y, 1] = p[0]; // G 
                        ++p;
                        rgbData[x, y, 0] = p[0]; // R 
                        ++p;
                    }
                    p += ByteOfSkip;
                    // 跳過剩下的 Padding bytes 
                }
            }
            
            bimage.UnlockBits(bmData);
            return rgbData;
        }

        //高效率圖形轉換工具--由陣列設定新的Bitmap
        public Bitmap SetRGBData(int[, ,] rgbData)
        {
            int width = rgbData.GetLength(0);
            int height = rgbData.GetLength(1);

            //依陣列長寬設定Bitmap新的物件
            Bitmap bitImg = new Bitmap(width, height, PixelFormat.Format24bppRgb);

            //鎖住Bitmap整個影像內容
            BitmapData bitmapData = bitImg.LockBits(
                new Rectangle(0, 0, width, height),
                ImageLockMode.WriteOnly,
                PixelFormat.Format24bppRgb);

            IntPtr imgPtr = bitmapData.Scan0;//取得影像資料的起始位置
            int stride = bitmapData.Stride;//影像scan的寬度
            int widthByte = width * 3;//影像陣列的實際寬度
            int skipByte = stride - widthByte;//所Padding的Byte數

            #region 設定RGB資料
            //注意C#的GDI+內的影像資料順序為BGR, 非一般熟悉的順序RGB
            //因此我們把順序調回GDI+的設定值, RGB->BGR
            unsafe
            {
                byte* p = (byte*)(void*)imgPtr;
                for (int j = 0; j < height; j++)
                {
                    for (int i = 0; i < width; i++)
                    {
                        p[0] = (byte)rgbData[i, j, 2];//B Channel
                        p++;

                        p[0] = (byte)rgbData[i, j, 1];//G Channel
                        p++;

                        p[0] = (byte)rgbData[i, j, 0];//B Channel
                        p++;
                    }
                    p += skipByte;
                }
            }

            //解開記憶體鎖
            bitImg.UnlockBits(bitmapData);

            #endregion

            return bitImg;
        }
    }
}
